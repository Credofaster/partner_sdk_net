/*
 * CredofasterPartnerApi.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using CredofasterPartnerApi.Standard;
using CredofasterPartnerApi.Standard.Utilities;
using CredofasterPartnerApi.Standard.Http.Request;
using CredofasterPartnerApi.Standard.Http.Response;
using CredofasterPartnerApi.Standard.Http.Client;
using CredofasterPartnerApi.Standard.Exceptions;

namespace CredofasterPartnerApi.Standard.Controllers
{
    public partial class EventsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static EventsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static EventsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new EventsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// A callback to receive the below Callbacks
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.RegisterCallbackResponse response from the API call</return>
        public Models.RegisterCallbackResponse RegisterCallback(Models.RegisterCallbackRequest request)
        {
            Task<Models.RegisterCallbackResponse> t = RegisterCallbackAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// A callback to receive the below Callbacks
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.RegisterCallbackResponse response from the API call</return>
        public async Task<Models.RegisterCallbackResponse> RegisterCallbackAsync(Models.RegisterCallbackRequest request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.ENUM_DEFAULT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/RegisterCallback");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("ApiKey", Configuration.ApiKey);
            _headers.Add("ClientId", Configuration.ClientId);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.RegisterCallbackResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// You are required to provide a HTTP/HTTPS endpoint, to which we will publish various events. 
        /// This Endpoint will be hosted on the CLIENT's Environment. If no endpoint is provided, we are not liable to any missing events. 
        /// NOTE: A DETAILED PDF of all Events is shared on request. It contains application events, System Health Events and Alerts on the same.
        /// </summary>
        /// <param name="payloadToReceive">Required parameter: Sample Payload: {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797a11e2564061b859781b18bb34dd","EventData":{}}</param>
        /// <return>Returns the Models.EventCallbackFeedback response from the API call</return>
        public Models.EventCallbackFeedback ClientEventFeedback(Models.EventCallbackPayload payloadToReceive)
        {
            Task<Models.EventCallbackFeedback> t = ClientEventFeedbackAsync(payloadToReceive);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// You are required to provide a HTTP/HTTPS endpoint, to which we will publish various events. 
        /// This Endpoint will be hosted on the CLIENT's Environment. If no endpoint is provided, we are not liable to any missing events. 
        /// NOTE: A DETAILED PDF of all Events is shared on request. It contains application events, System Health Events and Alerts on the same.
        /// </summary>
        /// <param name="payloadToReceive">Required parameter: Sample Payload: {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797a11e2564061b859781b18bb34dd","EventData":{}}</param>
        /// <return>Returns the Models.EventCallbackFeedback response from the API call</return>
        public async Task<Models.EventCallbackFeedback> ClientEventFeedbackAsync(Models.EventCallbackPayload payloadToReceive)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI(Configuration.Servers.MY_CALLBACK_ENDPOINT);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/my_endpoint_here");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(payloadToReceive);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.EventCallbackFeedback>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 